{
  "commands": {
    "attach:revealed_dynamics_to_cached_set_submission": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/AttachRevealedDynamicsToCachedSetSubmission",
      "commandName": "attach:revealed_dynamics_to_cached_set_submission",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "cache:main_image_relations": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CacheMainImageRelations",
      "commandName": "cache:main_image_relations",
      "description": "Connect images to their main parent (artist, posts, set_submission, opepen) for easy querying.",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "clean:dynamic_opepen_images": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CleanDynamicOpepenImages",
      "commandName": "clean:dynamic_opepen_images",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "clean:opepen_images": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CleanOpepenImages",
      "commandName": "clean:opepen_images",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "clear:multi_opt_ins": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ClearMultiOptIns",
      "commandName": "clear:multi_opt_ins",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "set:compute-opt-ins": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ComputeOptIns",
      "commandName": "set:compute-opt-ins",
      "description": "Update & validate the statistics of a set submission (opt ins, demand)",
      "args": [
        {
          "type": "string",
          "propertyName": "submission",
          "name": "submission",
          "required": true
        }
      ],
      "aliases": [],
      "flags": []
    },
    "reveal:execute": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ExecuteReveal",
      "commandName": "reveal:execute",
      "description": "Execute pending reveals",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "export:set26_seeds": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ExportSet26Seeds",
      "commandName": "export:set26_seeds",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "images:fix_non_static_sets": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/FixNonStaticSets",
      "commandName": "images:fix_non_static_sets",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "opepen:generate-set-064": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/GenerateSet064",
      "commandName": "opepen:generate-set-064",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "generate:submission_search_strings": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/GenerateSubmissionSearchStrings",
      "commandName": "generate:submission_search_strings",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "farcaster:import-casts": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportCasts",
      "commandName": "farcaster:import-casts",
      "description": "Import Opepen Casts",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "all",
          "propertyName": "all",
          "type": "boolean",
          "alias": "a"
        }
      ]
    },
    "images:import": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportImage",
      "commandName": "images:import",
      "description": "Import and image from a URI",
      "args": [
        {
          "type": "string",
          "propertyName": "uri",
          "name": "uri",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "featured",
          "propertyName": "featured",
          "type": "boolean",
          "alias": "f"
        }
      ]
    },
    "images:import-set-images": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportImagesFromMetadataApi",
      "commandName": "images:import-set-images",
      "description": "Import images from metadata api (used for dynamic sets)",
      "args": [
        {
          "type": "string",
          "propertyName": "set",
          "name": "set",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "edition",
          "propertyName": "edition",
          "type": "string"
        }
      ]
    },
    "import:opepen_bids": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportOpepenBids",
      "commandName": "import:opepen_bids",
      "description": "Import bids from OpenSea API",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "opepen:import-events": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportOpepenEvents",
      "commandName": "opepen:import-events",
      "description": "Import Events from a CSV",
      "args": [
        {
          "type": "string",
          "propertyName": "path",
          "name": "path",
          "required": true
        }
      ],
      "aliases": [],
      "flags": []
    },
    "import:opepen_listings": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportOpepenListings",
      "commandName": "import:opepen_listings",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "opepen:import-winners": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportOpepenWinners",
      "commandName": "opepen:import-winners",
      "description": "Import the winners of a set for opepen",
      "args": [
        {
          "type": "string",
          "propertyName": "set",
          "name": "set",
          "required": true
        }
      ],
      "aliases": [],
      "flags": []
    },
    "opepen:sync-all": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportOpepens",
      "commandName": "opepen:sync-all",
      "description": "Force update opepen tokens and ownership",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "opepen:import-sales": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ImportSales",
      "commandName": "opepen:import-sales",
      "description": "Import marketplace activity",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "set:generate-submission": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/MakeSubmissoinForSet",
      "commandName": "set:generate-submission",
      "description": "Create a set submission for for an existing set",
      "args": [
        {
          "type": "string",
          "propertyName": "set",
          "name": "set",
          "required": true
        }
      ],
      "aliases": [],
      "flags": []
    },
    "notify:daily_movements": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/NotifyDailyMovements",
      "commandName": "notify:daily_movements",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "notify:new_sets": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/NotifyNewSets",
      "commandName": "notify:new_sets",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "notify:nodes": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/NotifyNodes",
      "commandName": "notify:nodes",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "notify:random_opepen": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/NotifyRandomOpepen",
      "commandName": "notify:random_opepen",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "notify:random_opepen_set": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/NotifyRandomOpepenSet",
      "commandName": "notify:random_opepen_set",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "notify:test": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/NotifyTest",
      "commandName": "notify:test",
      "description": "",
      "args": [
        {
          "type": "string",
          "propertyName": "image",
          "name": "image",
          "required": true
        },
        {
          "type": "string",
          "propertyName": "text",
          "name": "text",
          "required": true
        },
        {
          "type": "string",
          "propertyName": "account",
          "name": "account",
          "required": true
        }
      ],
      "aliases": [],
      "flags": []
    },
    "opepen:import-metadata": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/OpepenMetadataImport",
      "commandName": "opepen:import-metadata",
      "description": "Import the metadata from the metadata api",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "from",
          "propertyName": "from",
          "type": "number"
        },
        {
          "name": "to",
          "propertyName": "to",
          "type": "number"
        },
        {
          "name": "revealed",
          "propertyName": "revealed",
          "type": "boolean"
        }
      ]
    },
    "votes:recompute": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/RecomputeVotes",
      "commandName": "votes:recompute",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "remove-duplicates",
          "propertyName": "removeDuplicates",
          "type": "boolean"
        },
        {
          "name": "recompute",
          "propertyName": "recompute",
          "type": "boolean"
        },
        {
          "name": "scores",
          "propertyName": "scores",
          "type": "boolean"
        }
      ]
    },
    "images:replace_file_contents": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ReplaceImageFileContents",
      "commandName": "images:replace_file_contents",
      "description": "",
      "args": [
        {
          "type": "string",
          "propertyName": "set",
          "name": "set",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "find",
          "propertyName": "find",
          "type": "string"
        },
        {
          "name": "replace",
          "propertyName": "replace",
          "type": "string"
        },
        {
          "name": "mime",
          "propertyName": "mime",
          "type": "string"
        }
      ]
    },
    "restore:past_valid_opt_ins": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/RestorePastValidOptIns",
      "commandName": "restore:past_valid_opt_ins",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "reveal:schedule": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/ScheduleReveal",
      "commandName": "reveal:schedule",
      "description": "Set the reveal block for all submissions that should reveal",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "seed:subscription_history": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/SeedSubscriptionHistory",
      "commandName": "seed:subscription_history",
      "description": "Seed previous ids and counts in subscription history",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "reveal:update-images": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/SetRevealImages",
      "commandName": "reveal:update-images",
      "description": "Execute pending reveals",
      "args": [
        {
          "type": "string",
          "propertyName": "set",
          "name": "set",
          "required": true
        }
      ],
      "aliases": [],
      "flags": []
    },
    "set:stage": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/StageSet",
      "commandName": "set:stage",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "opepen:sync": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/SyncOpepen",
      "commandName": "opepen:sync",
      "description": "Sync the blockchain state of current opepen ownership by parsing blockchain events",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "update:account_profile_completion": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/UpdateAccountProfileCompletion",
      "commandName": "update:account_profile_completion",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "update:account_set_counts": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/UpdateAccountSetCounts",
      "commandName": "update:account_set_counts",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "update:dynamic_set_images_cache": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/UpdateDynamicSetImagesCache",
      "commandName": "update:dynamic_set_images_cache",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "images:update-third-party-images": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/UpdateMarketplaceImages",
      "commandName": "images:update-third-party-images",
      "description": "Update third party image cache",
      "args": [
        {
          "type": "string",
          "propertyName": "set",
          "name": "set",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "edition",
          "propertyName": "edition",
          "type": "string"
        }
      ]
    },
    "update:names": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/UpdateOpepenNames",
      "commandName": "update:names",
      "description": "Update the names of all Opepen tokens",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "dump:rcfile": {
      "settings": {},
      "commandPath": "@adonisjs/core/build/commands/DumpRc",
      "commandName": "dump:rcfile",
      "description": "Dump contents of .adonisrc.json file along with defaults",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "list:routes": {
      "settings": {
        "loadApp": true,
        "stayAlive": true
      },
      "commandPath": "@adonisjs/core/build/commands/ListRoutes/index",
      "commandName": "list:routes",
      "description": "List application routes",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "verbose",
          "propertyName": "verbose",
          "type": "boolean",
          "description": "Display more information"
        },
        {
          "name": "reverse",
          "propertyName": "reverse",
          "type": "boolean",
          "alias": "r",
          "description": "Reverse routes display"
        },
        {
          "name": "methods",
          "propertyName": "methodsFilter",
          "type": "array",
          "alias": "m",
          "description": "Filter routes by method"
        },
        {
          "name": "patterns",
          "propertyName": "patternsFilter",
          "type": "array",
          "alias": "p",
          "description": "Filter routes by the route pattern"
        },
        {
          "name": "names",
          "propertyName": "namesFilter",
          "type": "array",
          "alias": "n",
          "description": "Filter routes by route name"
        },
        {
          "name": "json",
          "propertyName": "json",
          "type": "boolean",
          "description": "Output as JSON"
        },
        {
          "name": "table",
          "propertyName": "table",
          "type": "boolean",
          "description": "Output as Table"
        },
        {
          "name": "max-width",
          "propertyName": "maxWidth",
          "type": "number",
          "description": "Specify maximum rendering width. Ignored for JSON Output"
        }
      ]
    },
    "generate:key": {
      "settings": {},
      "commandPath": "@adonisjs/core/build/commands/GenerateKey",
      "commandName": "generate:key",
      "description": "Generate a new APP_KEY secret",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "repl": {
      "settings": {
        "loadApp": true,
        "environment": "repl",
        "stayAlive": true
      },
      "commandPath": "@adonisjs/repl/build/commands/AdonisRepl",
      "commandName": "repl",
      "description": "Start a new REPL session",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "db:seed": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbSeed",
      "commandName": "db:seed",
      "description": "Execute database seeders",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection for the seeders",
          "alias": "c"
        },
        {
          "name": "interactive",
          "propertyName": "interactive",
          "type": "boolean",
          "description": "Run seeders in interactive mode",
          "alias": "i"
        },
        {
          "name": "files",
          "propertyName": "files",
          "type": "array",
          "description": "Define a custom set of seeders files names to run",
          "alias": "f"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "db:wipe": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbWipe",
      "commandName": "db:wipe",
      "description": "Drop all tables, views and types in database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "drop-views",
          "propertyName": "dropViews",
          "type": "boolean",
          "description": "Drop all views"
        },
        {
          "name": "drop-types",
          "propertyName": "dropTypes",
          "type": "boolean",
          "description": "Drop all custom types (Postgres only)"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        }
      ]
    },
    "db:truncate": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbTruncate",
      "commandName": "db:truncate",
      "description": "Truncate all tables in database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        }
      ]
    },
    "make:model": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/MakeModel",
      "commandName": "make:model",
      "description": "Make a new Lucid model",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the model class"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "migration",
          "propertyName": "migration",
          "type": "boolean",
          "alias": "m",
          "description": "Generate the migration for the model"
        },
        {
          "name": "controller",
          "propertyName": "controller",
          "type": "boolean",
          "alias": "c",
          "description": "Generate the controller for the model"
        },
        {
          "name": "factory",
          "propertyName": "factory",
          "type": "boolean",
          "alias": "f",
          "description": "Generate a factory for the model"
        }
      ]
    },
    "make:migration": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/MakeMigration",
      "commandName": "make:migration",
      "description": "Make a new migration file",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the migration file"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "The connection flag is used to lookup the directory for the migration file"
        },
        {
          "name": "folder",
          "propertyName": "folder",
          "type": "string",
          "description": "Pre-select a migration directory"
        },
        {
          "name": "create",
          "propertyName": "create",
          "type": "string",
          "description": "Define the table name for creating a new table"
        },
        {
          "name": "table",
          "propertyName": "table",
          "type": "string",
          "description": "Define the table name for altering an existing table"
        }
      ]
    },
    "make:seeder": {
      "settings": {},
      "commandPath": "@adonisjs/lucid/build/commands/MakeSeeder",
      "commandName": "make:seeder",
      "description": "Make a new Seeder file",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the seeder class"
        }
      ],
      "aliases": [],
      "flags": []
    },
    "make:factory": {
      "settings": {},
      "commandPath": "@adonisjs/lucid/build/commands/MakeFactory",
      "commandName": "make:factory",
      "description": "Make a new factory",
      "args": [
        {
          "type": "string",
          "propertyName": "model",
          "name": "model",
          "required": true,
          "description": "The name of the model"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "model-path",
          "propertyName": "modelPath",
          "type": "string",
          "description": "The path to the model"
        },
        {
          "name": "exact",
          "propertyName": "exact",
          "type": "boolean",
          "description": "Create the factory with the exact name as provided",
          "alias": "e"
        }
      ]
    },
    "migration:run": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Run",
      "commandName": "migration:run",
      "description": "Migrate database by running pending migrations",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force to run migrations in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "migration:rollback": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Rollback",
      "commandName": "migration:rollback",
      "description": "Rollback migrations to a specific batch number",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explictly force to run migrations in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "batch",
          "propertyName": "batch",
          "type": "number",
          "description": "Define custom batch number for rollback. Use 0 to rollback to initial state"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "migration:status": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Status",
      "commandName": "migration:status",
      "description": "View migrations status",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        }
      ]
    },
    "migration:reset": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Reset",
      "commandName": "migration:reset",
      "description": "Rollback all migrations",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        }
      ]
    },
    "migration:refresh": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Refresh",
      "commandName": "migration:refresh",
      "description": "Rollback and migrate database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "seed",
          "propertyName": "seed",
          "type": "boolean",
          "description": "Run seeders"
        }
      ]
    },
    "migration:fresh": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Fresh",
      "commandName": "migration:fresh",
      "description": "Drop all tables and re-migrate the database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "seed",
          "propertyName": "seed",
          "type": "boolean",
          "description": "Run seeders"
        },
        {
          "name": "drop-views",
          "propertyName": "dropViews",
          "type": "boolean",
          "description": "Drop all views"
        },
        {
          "name": "drop-types",
          "propertyName": "dropTypes",
          "type": "boolean",
          "description": "Drop all custom types (Postgres only)"
        }
      ]
    },
    "make:mailer": {
      "settings": {},
      "commandPath": "@adonisjs/mail/build/commands/MakeMailer",
      "commandName": "make:mailer",
      "description": "Make a new mailer class",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the mailer class"
        }
      ],
      "aliases": [],
      "flags": []
    }
  },
  "aliases": {}
}
